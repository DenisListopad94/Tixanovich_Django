1)	Создайте классы представления для вывода шаблонов при помощи  TemplateView, 
там где требуется просто вывести шаблон и не выводить данные модели.

class MainTemplateView(TemplateView):
    template_name = "main.html"

________________
2)	Создайте классы представлений DetailView и ListView для вывода данных  модели 
в шаблон.  При необходимости фильтрации  данных, используйте get_queryset() метод 
или queryset атрибут. В одном классе представления реализуйте пагинацию.

class PersonListView(ListView):
    template_name = "persons.html"
    model = Person
    queryset = Person.objects.all()  
    context_object_name = "persons"
    paginate_by = 5

________________
3)	Создайте классы представлений CreateView для заполнения форм данными, связанными 
с моделью и FormView для форм не связанных с моделью.

class UserAddFormView(CreateView):
    template_name = "user_add_form.html"
    form_class = UserModelForm
    reverse_lazy = "persons"
________________
5)	Создайте REST приложение, для тестирования и интеграции API. Пропишите необходимые 
настройки в конфигурационном файле вашего проекта.

pip install djangorestframework
pip install markdown       
pip install django-filter  

INSTALLED_APPS = [
    ...
    'rest_framework',
]

urlpatterns = [
    ...
    path('api-auth/', include('rest_framework.urls'))
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}
________________
6)	Для вывода информации о созданных вами владельцах отелей напишите 
сериализатор не привязанный к модели! Внутри сериализатора определите 
create и update методы.

class HotelOwnerSerializer(serializers.Serializer):
    first_name = serializers.CharField(required=False, max_length=30)
    last_name = serializers.CharField(required=False, max_length=30)
    age = serializers.IntegerField(required=False)
    sex = serializers.CharField(required=False)

    def create(self, validated_data):
        return HotelOwner.objects.create(**validated_data)

    def update(self, instance, validated_data):
        instance.first_name = validated_data.get('first_name', instance.first_name)
        instance.last_name = validated_data.get('last_name', instance.last_name)
        instance.age = validated_data.get('age', instance.age)
        instance.sex = validated_data.get('sex', instance.sex)
        instance.save()
        return instance
________________
7)	С помощью сериализатора из предыдущего задания реализуйте 4 класса 
представления(наследуясь от APIView), которые реализуют четыре основных 
запроса GET/POST/PUT/DELETE.

class HotelOwnerApiView(APIView):
    def get(self, request, format=None):
        owners = HotelOwner.objects.all()
        serializer = HotelOwnerSerializer(owners, many=True)
        return Response(serializer.data)

    def post(self, request, format=None):
        owner = HotelOwnerSerializer(data=request.data)
        if owner.is_valid():
            owner.save()
            return Response(owner.data, status=status.HTTP_201_CREATED)
        return Response(owner.errors, status=status.HTTP_400_BAD_REQUEST)

    def put(self, request, pk, format=None):
        owner = HotelOwner.objects.get(pk=pk)
        serializer = HotelOwnerSerializer(owner, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk, format=None):
        owner = HotelOwner.objects.get(pk=pk)
        owner.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
________________
8)	Напишите сериализатор связанный с моделью Hobbies. Реализуйте функцию 
представления для вывода информацию о хобби (без пользователей ).

class HobbyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = Hobby
        fields = ["name", "detail"]
		
class HobbyListApiView(mixins.ListModelMixin, generics.GenericAPIView):
    queryset = Hobby.objects.all()
    serializer_class = HobbyModelSerializer

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)
________________
9)	*Напишите класс представления для вывода всех пользователей, которые любят 
определённое хобби. 

class HobbyModelSerializer(serializers.ModelSerializer):
     class Meta:
         model = User
         fields = ["first_name", "last_name"]

	 
class HobbyListApiView(mixins.ListModelMixin, generics.GenericAPIView):
    queryset = Hobby.objects.get(name="Photography").owners.all()
    serializer_class = HobbyModelSerializer

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)
________________





