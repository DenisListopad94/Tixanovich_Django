1)	Настройте фильтрацию и поиск в DRF для ваших классов представлений. 

class UserListApiView(generics.ListCreateAPIView):
    authentication_classes = [SessionAuthentication, BasicAuthentication]  
    permission_classes = [IsAuthenticated]
    queryset = User.objects.all()
    serializer_class = UserModelSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['username', 'first_name', 'last_name', 'email', 'is_superuser', 'is_staff']
    search_fields = ['username', 'first_name', 'last_name', 'email']

class HobbyListApiView(mixins.ListModelMixin, generics.GenericAPIView):
    queryset = Hobby.objects.all()
    serializer_class = HobbyModelSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['name', 'detail']
    search_fields = ['name', 'detail']

________________
2)	Создать пагинацию в Django на те страницы, где есть отображение более 5 
объектов модели.

class FiveResultsSetPagination(PageNumberPagination):
    page_size = 5
    page_size_query_param = 'page_size'
    max_page_size = 10

    def get_paginated_response(self, data):
        return Response({
            'total': self.page.paginator.count,
            'next_page': self.get_next_link(),
            'previous_page': self.get_previous_link(),
            'results': data
        })

class HobbyListApiView(mixins.ListModelMixin, generics.GenericAPIView):
    queryset = Hobby.objects.all()
    serializer_class = HobbyModelSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['name', 'detail']
    search_fields = ['name', 'detail']
    ordering_fields = ['name']
    pagination_class = FiveResultsSetPagination
________________
3)	Добавить добавление фото при создании профиля пользователей через форму.

def profile_add(request):
    if request.method == "POST":
        form = ProfileModelForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse("persons"))
    else:
        form = ProfileModelForm()
    context = {
        "form": form
    }
    return render(
        request=request,
        template_name="profile_add_form.html",
        context=context
    )


________________
4)	Вывести в админ панели фото пользователей  и отелей. 

class ProfileAdmin(admin.ModelAdmin):
    pass
    list_display = [
        "person_id", get_html_photo,
        "serial", "id_card_number",
    ]


class HotelAdmin(admin.ModelAdmin):
    list_display = [
        "name", "address", "stars", "rating",
        "owners", "description", get_html_photo,
    ]
    inlines = [
        BookInfoInline,
        HotelsCommentInLine,
        PersonCommentInline,
    ]
    actions = [
        make_five_stars,
    ]

________________


________________


________________


________________





